{"version":3,"file":"index.modern.js","sources":["../src/context.js","../src/operators.js","../src/Field.jsx","../src/Operator.jsx","../src/DatePicker.jsx","../src/Value.jsx","../src/RuleGroup.jsx","../src/QueryBuilder.jsx"],"sourcesContent":["import React from \"react\";\n\nexport default React.createContext({\n    dispatch: null,\n    filter: [],\n    filtersByValue: {},\n    flattenedFilters: [],\n    maxLevel: null,\n    operators: [],\n    operatorsByType: {},\n    operatorsByValue: {},\n});\n","const operators = [\n    {\n        label: \"equal to\",\n        value: \"equal\",\n        types: [\"date\", \"integer\", \"number\", \"radio\", \"select\", \"switch\", \"text\"],\n    },\n    {\n        label: \"not equal to\",\n        value: \"not_equal\",\n        types: [\"date\", \"integer\", \"number\", \"radio\", \"select\", \"switch\", \"text\"],\n    },\n    {\n        label: \"contains\",\n        value: \"contains\",\n        types: [\"text\"],\n    },\n    {\n        label: \"does not contain\",\n        value: \"not_contains\",\n        types: [\"text\"],\n    },\n    {\n        label: \"less than\",\n        value: \"less\",\n        types: [\"number\", \"integer\"],\n    },\n    {\n        label: \"greater than\",\n        value: \"greater\",\n        types: [\"number\", \"integer\"],\n    },\n    {\n        label: \"less or equal to\",\n        value: \"less_equal\",\n        types: [\"number\", \"integer\"],\n    },\n    {\n        label: \"greater or equal to\",\n        value: \"greater_equal\",\n        types: [\"number\", \"integer\"],\n    },\n    {\n        label: \"before than\",\n        value: \"before\",\n        types: [\"date\"],\n    },\n    {\n        label: \"after than\",\n        value: \"after\",\n        types: [\"date\"],\n    },\n    {\n        label: \"before or equal to\",\n        value: \"before_equal\",\n        types: [\"date\"],\n    },\n    {\n        label: \"after or equal to\",\n        value: \"after_equal\",\n        types: [\"date\"],\n    },\n    {\n        label: \"in\",\n        value: \"in\",\n        types: [\"multiselect\"],\n    },\n    {\n        label: \"not in\",\n        value: \"not_in\",\n        types: [\"multiselect\"],\n    },\n    {\n        label: \"is null\",\n        value: \"null\",\n        types: [\"date\", \"integer\", \"number\", \"multiselect\", \"radio\", \"select\", \"switch\", \"text\"],\n    },\n    {\n        label: \"is not null\",\n        value: \"not_null\",\n        types: [\"date\", \"integer\", \"number\", \"multiselect\", \"radio\", \"select\", \"switch\", \"text\"],\n    },\n];\n\nexport default operators;\n","import { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { dequal } from \"dequal\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport Context from \"./context\";\n\nconst Field = React.memo(\n    (props) => {\n        const context = React.useContext(Context);\n        const { field, id, testId } = props;\n\n        const { dispatch, filtersByValue, flattenedFilters, operatorsByType } = context;\n        const filter = field ? filtersByValue[field] : null;\n\n        return (\n            <Autocomplete\n                fullWidth\n                data-testid={`field-${testId}`}\n                disableClearable={true}\n                groupBy={(option) => option.group}\n                getOptionLabel={(option) => option.label}\n                getOptionSelected={(option, value) => {\n                    return option.value === value.value;\n                }}\n                options={flattenedFilters}\n                renderInput={(params) => <TextField {...params} placeholder=\"Field\" size=\"small\" variant=\"outlined\" />}\n                style={{ minWidth: 250 }}\n                value={filter}\n                onChange={(event, selected) => {\n                    const value = selected ? selected.value : null;\n                    const { type } = filtersByValue[value];\n                    const operators = operatorsByType[type];\n                    const operator = operators?.length > 0 ? operators[0].value : null;\n                    dispatch({ type: \"set-field\", id, operator, value });\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => {\n        // Skip re-rendering if the field didn't change.\n        return dequal(prevProps, nextProps);\n    }\n);\n\nField.propTypes = {\n    field: PropTypes.string,\n    id: PropTypes.number.isRequired,\n    testId: PropTypes.string.isRequired,\n};\n\nField.whyDidYouRender = false;\n\nexport default Field;\n","import { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { dequal } from \"dequal\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport Context from \"./context\";\n\nconst Operator = React.memo(\n    (props) => {\n        const context = React.useContext(Context);\n        const { field, id, operator, testId } = props;\n\n        const { dispatch, filtersByValue, operatorsByType, operatorsByValue } = context;\n\n        const filter = field ? filtersByValue[field] : null;\n        const options = filter ? operatorsByType[filter.type] : [];\n        const value = operator ? operatorsByValue[operator] : null;\n\n        return (\n            <Autocomplete\n                fullWidth\n                data-testid={`operator-${testId}`}\n                disableClearable={true}\n                getOptionLabel={(option) => option.label}\n                getOptionSelected={(option, value) => option.value === value.value}\n                options={options}\n                renderInput={(params) => (\n                    <TextField {...params} placeholder=\"Operator\" size=\"small\" variant=\"outlined\" />\n                )}\n                style={{ minWidth: 200 }}\n                value={value}\n                onChange={(event, selected) => {\n                    const { value } = selected;\n                    dispatch({ type: \"set-operator\", id, value });\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => {\n        // Skip re-rendering if the operator didn't change.\n        return dequal(prevProps, nextProps);\n    }\n);\n\nOperator.propTypes = {\n    field: PropTypes.string,\n    id: PropTypes.number.isRequired,\n    operator: PropTypes.string,\n    testId: PropTypes.string.isRequired,\n};\n\nOperator.whyDidYouRender = false;\n\nexport default Operator;\n","import DateFnsUtils from \"@date-io/date-fns\";\nimport { Grid, IconButton } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { DatePicker as MuiDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { parseISO, startOfDay } from \"date-fns\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((t) => ({\n    clearButton: {\n        margin: t.spacing(1),\n    },\n    clearCell: {\n        marginLeft: -t.spacing(0.5),\n        marginTop: (props) => (props.label ? t.spacing(1.5) : \"none\"),\n    },\n}));\n\nfunction parseDate(date) {\n    if (!date) {\n        return null;\n    }\n    if (typeof date === \"string\") {\n        date = parseISO(date);\n    }\n    date = startOfDay(date);\n    return date;\n}\n\nconst DatePicker = (props) => {\n    const classes = useStyles(props);\n\n    const [value, setValue] = React.useState(parseDate(props.value));\n\n    React.useEffect(() => {\n        const date = parseDate(props.value);\n        setValue(date);\n    }, [props.value]);\n\n    function handleDateChange(date) {\n        date = parseDate(date);\n        setValue(date);\n        if (props.onChange) {\n            props.onChange(date);\n        }\n    }\n\n    /*\n     * https://material-ui-pickers.dev/api/DatePicker\n     */\n    function getDatePickerProps() {\n        const datePickerProps = {\n            ...props,\n            InputLabelProps: {\n                ...props.InputLabelProps,\n                shrink: true,\n            },\n            variant: \"inline\",\n        };\n        delete datePickerProps.clearable; // not supported by the inline variant\n        return datePickerProps;\n    }\n    return (\n        <Grid container>\n            <Grid item>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <MuiDatePicker {...getDatePickerProps()} value={value} onChange={handleDateChange} />\n                </MuiPickersUtilsProvider>\n            </Grid>\n            {props.clearable && (\n                <Grid item className={classes.clearCell}>\n                    <IconButton\n                        aria-label=\"clear\"\n                        className={classes.clearButton}\n                        data-testid={`${props[\"data-testid\"]}-clear`}\n                        size=\"small\"\n                        onClick={() => handleDateChange(null)}\n                    >\n                        <CloseIcon fontSize=\"inherit\" />\n                    </IconButton>\n                </Grid>\n            )}\n        </Grid>\n    );\n};\n\nDatePicker.defaultProps = {\n    ...MuiDatePicker.defaultProps,\n    \"autoOk\": true,\n    \"data-testid\": \"date-picker\",\n    \"format\": \"PPP\",\n};\n\nDatePicker.propTypes = {\n    ...MuiDatePicker.propTypes,\n    \"data-testid\": PropTypes.string,\n    \"clearable\": PropTypes.bool,\n};\n\nexport default DatePicker;\n","import { FormControlLabel, FormGroup, Radio, Switch, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { format } from \"date-fns\";\nimport { dequal } from \"dequal\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport Context from \"./context\";\nimport DatePicker from \"./DatePicker\";\n\nconst useFormControlLabelStyles = makeStyles((t) => {\n    return {\n        label: {\n            fontSize: t.typography.fontSize,\n        },\n    };\n});\n\nconst readNumericValue = (value) => {\n    return value !== null && value !== undefined ? value : \"\";\n};\n\nconst supportedTypes = new Set([\"date\", \"integer\", \"multiselect\", \"number\", \"radio\", \"select\", \"switch\", \"text\"]);\n\nconst Value = React.memo(\n    (props) => {\n        const classes = {\n            formControlLabel: useFormControlLabelStyles(),\n        };\n        const context = React.useContext(Context);\n\n        const { field, id, operator, value } = props;\n        const { customOperators, dispatch, filtersByValue } = context;\n\n        if (/null/i.test(operator)) {\n            return <span />;\n        }\n        const testId = `value-${props.testId}`;\n        const filter = field ? { ...filtersByValue[field] } : { type: null };\n\n        if (!supportedTypes.has(filter.type)) {\n            const customOperator = customOperators[filter.type];\n            filter.type = customOperator?.type;\n        }\n        switch (filter.type) {\n            case \"date\":\n                return (\n                    <DatePicker\n                        clearable\n                        data-testid={testId}\n                        value={value || null}\n                        onChange={(date) => {\n                            const value = date ? format(date, \"yyyy-MM-dd\") : null;\n                            dispatch({ type: \"set-value\", id, value });\n                        }}\n                    />\n                );\n            case \"integer\":\n                return (\n                    <TextField\n                        data-testid={testId}\n                        value={readNumericValue(value)}\n                        onChange={(event) => {\n                            const inputValue = event.target.value;\n                            const newValue = inputValue.length > 0 ? Number(inputValue) : null;\n                            if (newValue !== value) {\n                                dispatch({ type: \"set-value\", id, value: newValue });\n                            }\n                        }}\n                        onKeyPress={(event) => {\n                            if (/\\D/.test(event.key)) {\n                                event.preventDefault();\n                            }\n                        }}\n                    />\n                );\n            case \"multiselect\":\n                return (\n                    <Autocomplete\n                        filterSelectedOptions\n                        fullWidth\n                        multiple\n                        openOnFocus\n                        data-testid={testId}\n                        disableCloseOnSelect={true}\n                        getOptionLabel={(option) => option.label}\n                        getOptionSelected={(option, value) => option.value === value.value}\n                        limitTags={-1}\n                        options={filter.options}\n                        renderInput={(params) => <TextField {...params} />}\n                        size=\"small\"\n                        style={{ paddingTop: 4, width: \"auto\" }}\n                        value={filter.options.filter((op) => value?.includes(op.value))}\n                        onChange={(event, selected) => {\n                            const value = (selected || []).map((item) => item.value);\n                            dispatch({ type: \"set-value\", id, value });\n                        }}\n                    />\n                );\n            case \"number\":\n                return (\n                    <TextField\n                        data-testid={testId}\n                        value={readNumericValue(value)}\n                        onChange={(event) => {\n                            const { value: val } = event.target;\n                            const v = val.replace(/[^.\\d]|^0+/g, \"\").replace(/^(\\d*\\.?)|(\\d*)\\.?/g, \"$1$2\") || null;\n                            if (v !== value) {\n                                dispatch({ type: \"set-value\", id, value: v });\n                            }\n                        }}\n                    />\n                );\n            case \"radio\":\n                return (\n                    <FormGroup row>\n                        <FormControlLabel\n                            classes={classes.formControlLabel}\n                            control={\n                                <Radio\n                                    checked={value === true}\n                                    color=\"primary\"\n                                    data-testid={`${testId}-true`}\n                                    name={testId}\n                                    value={value}\n                                    onChange={() => {\n                                        dispatch({ type: \"set-value\", id, value: true });\n                                    }}\n                                />\n                            }\n                            label=\"True\"\n                            value={value}\n                        />\n                        <FormControlLabel\n                            classes={classes.formControlLabel}\n                            control={\n                                <Radio\n                                    checked={value === false}\n                                    color=\"primary\"\n                                    data-testid={`${testId}-false`}\n                                    name={testId}\n                                    value={value}\n                                    onChange={() => {\n                                        dispatch({ type: \"set-value\", id, value: false });\n                                    }}\n                                />\n                            }\n                            label=\"False\"\n                            value={value}\n                        />\n                    </FormGroup>\n                );\n            case \"select\":\n                return (\n                    <Autocomplete\n                        data-testid={testId}\n                        getOptionLabel={(option) => option.label}\n                        getOptionSelected={(option, value) => option.value === value.value}\n                        options={filter.options}\n                        renderInput={(params) => <TextField {...params} />}\n                        style={{ width: 250 }}\n                        value={filter.options.find((op) => value === op.value)}\n                        onChange={(event, selected) => {\n                            const value = selected ? selected.value : null;\n                            dispatch({ type: \"set-value\", id, value });\n                        }}\n                    />\n                );\n            case \"switch\":\n                return (\n                    <Switch\n                        color=\"primary\"\n                        data-testid={testId}\n                        checked={value || false}\n                        onChange={(event) => {\n                            const value = event.target.checked;\n                            dispatch({ type: \"set-value\", id, value });\n                        }}\n                    />\n                );\n            default:\n                return (\n                    <TextField\n                        fullWidth\n                        data-testid={testId}\n                        value={value || \"\"}\n                        onChange={(event) => {\n                            const { value } = event.target;\n                            dispatch({ type: \"set-value\", id, value });\n                        }}\n                    />\n                );\n        }\n    },\n    (prevProps, nextProps) => {\n        // Skip re-rendering if the value didn't change.\n        return dequal(prevProps, nextProps);\n    }\n);\n\nValue.propTypes = {\n    field: PropTypes.string,\n    id: PropTypes.number.isRequired,\n    operator: PropTypes.string,\n    testId: PropTypes.string.isRequired,\n    value: PropTypes.any,\n};\n\nValue.whyDidYouRender = false;\n\nexport default Value;\n","import { Button, Grid, IconButton, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AddCircleOutline as AddIcon, RemoveCircleOutline as RemoveIcon } from \"@material-ui/icons\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Draggable, Container as DraggableContainer } from \"react-smooth-dnd\";\n\nimport Context from \"./context\";\nimport Field from \"./Field\";\nimport Operator from \"./Operator\";\nimport Value from \"./Value\";\n\nconst removeIconStyles = (t) => ({\n    removeButton: {\n        marginRight: t.spacing(-1),\n        marginTop: t.spacing(0.75),\n    },\n    removeIcon: {\n        fill: \"rgba(255, 0, 0, 0.9)\",\n    },\n});\n\nconst useRuleStyles = makeStyles((t) => {\n    return {\n        ...removeIconStyles(t),\n        container: {\n            \"& > div\": {\n                marginBottom: t.spacing(0.5),\n                marginTop: t.spacing(0.5),\n            },\n            \"cursor\": \"move\",\n        },\n        valueGridItem: {\n            flex: \"auto\",\n        },\n    };\n});\n\nconst Rule = (props) => {\n    const classes = useRuleStyles();\n    const context = React.useContext(Context);\n\n    const { id, level, position, rule } = props;\n    const { combinator, field, operator, rules, value } = rule;\n\n    const { dispatch } = context;\n\n    const testId = `${level}-${position}`;\n\n    return combinator ? (\n        <RuleGroup combinator={combinator} id={id} level={level + 1} rules={rules} />\n    ) : (\n        <Grid container className={classes.container} data-testid={`rule-${testId}`} spacing={2}>\n            <Grid item>\n                <IconButton\n                    className={classes.removeButton}\n                    data-testid={`rule-${testId}-remove`}\n                    size=\"small\"\n                    onClick={() => {\n                        dispatch({ type: \"remove-node\", id });\n                    }}\n                >\n                    <RemoveIcon className={classes.removeIcon} />\n                </IconButton>\n            </Grid>\n            <Grid item>\n                <Field field={field} id={id} testId={testId} />\n            </Grid>\n            <Grid item>\n                <Operator field={field} id={id} operator={operator} testId={testId} />\n            </Grid>\n            <Grid item className={classes.valueGridItem}>\n                <Value field={field} id={id} operator={operator} testId={testId} value={value} />\n            </Grid>\n        </Grid>\n    );\n};\n\nRule.propTypes = {\n    id: PropTypes.number.isRequired,\n    level: PropTypes.number.isRequired,\n    position: PropTypes.number.isRequired,\n    rule: PropTypes.object.isRequired,\n};\n\nconst useRuleGroupStyles = makeStyles((t) => ({\n    actionButton: {\n        \"& svg\": {\n            marginRight: t.spacing(0.5),\n            marginTop: t.spacing(0.25),\n        },\n        \"textTransform\": \"none\",\n    },\n    combinator: {\n        height: 36,\n        padding: t.spacing(0, 1.5),\n    },\n    group: {\n        borderLeft: (props) => (props.level > 0 ? `2px solid ${t.palette.divider}` : \"none\"),\n        paddingLeft: t.spacing(1.5),\n        marginBottom: t.spacing(0.5),\n        marginTop: (props) => (props.level > 0 ? t.spacing(0.5) : \"none\"),\n    },\n    ...removeIconStyles(t),\n}));\n\nconst RuleGroup = (props) => {\n    const classes = useRuleGroupStyles(props);\n    const context = React.useContext(Context);\n\n    const { combinator, combinators, id, level, rules } = props;\n    const testId = `group-${level}`;\n\n    const { dispatch, maxLevels } = context;\n\n    return level <= maxLevels ? (\n        <Grid container className={classes.group} data-testid={testId} direction=\"column\" spacing={1}>\n            <Grid item>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <IconButton\n                            className={classes.removeButton}\n                            data-testid={`${testId}-remove`}\n                            disabled={level === 0}\n                            size=\"small\"\n                            onClick={() => {\n                                dispatch({ type: \"remove-node\", id });\n                            }}\n                        >\n                            <RemoveIcon className={level > 0 ? classes.removeIcon : null} />\n                        </IconButton>\n                    </Grid>\n                    <Grid item>\n                        <ToggleButtonGroup\n                            exclusive\n                            size=\"small\"\n                            value={combinator}\n                            onChange={(event, value) => {\n                                if (value) {\n                                    dispatch({ type: \"set-combinator\", id, value });\n                                }\n                            }}\n                        >\n                            {combinators.map((item) => (\n                                <ToggleButton\n                                    key={item.value}\n                                    data-testid={`${testId}-combinator-${item.value}`}\n                                    className={classes.combinator}\n                                    value={item.value}\n                                >\n                                    <Typography variant=\"body2\">{item.label}</Typography>\n                                </ToggleButton>\n                            ))}\n                        </ToggleButtonGroup>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            className={classes.actionButton}\n                            color=\"primary\"\n                            data-testid={`${testId}-add-rule`}\n                            onClick={() => {\n                                dispatch({ type: \"add-rule\", id });\n                            }}\n                        >\n                            <AddIcon />\n                            Rule\n                        </Button>\n                    </Grid>\n                    {level < maxLevels && (\n                        <Grid item>\n                            <Button\n                                className={classes.actionButton}\n                                color=\"primary\"\n                                data-testid={`${testId}-add-group`}\n                                onClick={() => {\n                                    dispatch({ type: \"add-group\", id });\n                                }}\n                            >\n                                <AddIcon />\n                                Group\n                            </Button>\n                        </Grid>\n                    )}\n                </Grid>\n            </Grid>\n            {rules?.length > 0 && (\n                <Grid item>\n                    <DraggableContainer\n                        onDrop={({ addedIndex, removedIndex }) => {\n                            dispatch({ type: \"move-rule\", addedIndex, id, removedIndex });\n                        }}\n                    >\n                        {rules.map((rule, position) => (\n                            <Draggable key={rule.id}>\n                                <Rule id={rule.id} level={level} position={position} rule={rule} />\n                            </Draggable>\n                        ))}\n                    </DraggableContainer>\n                </Grid>\n            )}\n        </Grid>\n    ) : (\n        <span />\n    );\n};\n\nRuleGroup.defaultProps = {\n    combinator: \"and\",\n    combinators: [\n        { label: \"AND\", value: \"and\" },\n        { label: \"OR\", value: \"or\" },\n    ],\n    rules: [],\n};\n\nRuleGroup.propTypes = {\n    combinator: PropTypes.string,\n    combinators: PropTypes.array,\n    id: PropTypes.number.isRequired,\n    level: PropTypes.number.isRequired,\n    rules: PropTypes.array,\n};\n\nexport default RuleGroup;\n","import arrayMove from \"array-move\";\nimport { dequal } from \"dequal\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport Context from \"./context\";\nimport operators from \"./operators\";\nimport RuleGroup from \"./RuleGroup\";\n\n/**\n * Allows retrieving filters by value, in O(1) time.\n *\n * @param {Array} filters The data descriptions.\n * @returns {Object} Filters map.\n */\nexport function generateFiltersByValue(filters) {\n    const map = {};\n    filters.forEach((filter) => {\n        const options = filter.options || [];\n        options.forEach((option) => {\n            const { value } = option;\n            if (Object.prototype.hasOwnProperty.call(map, value)) {\n                throw new Error(`Duplicated filter: ${value}`);\n            }\n            map[value] = { ...option };\n        });\n    });\n    return map;\n}\n\n/**\n * Flattens filters for autocomplete fields.\n *\n * @param {Array} filters The data descriptions.\n * @returns {List} Filters list.\n */\nexport function generateFlattenedFilters(filters) {\n    const list = [];\n    filters.forEach((filter) => {\n        filter.options.forEach((option) => {\n            list.push({\n                group: filter.label,\n                ...option,\n            });\n        });\n    });\n    return list;\n}\n\n/**\n * Sorts filters within their own groups.\n *\n * @param {Array} filters The data descriptions.\n * @returns {Array} The sorted filters.\n */\nexport function sortFilterGroupsByLabel(filters) {\n    filters.forEach((filter) => {\n        filter.options = filter.options.sort((a, b) => a.label.localeCompare(b.label));\n    });\n    return filters;\n}\n\n/**\n * Allows retrieving operators by type, in O(1) time.\n *\n * @param {Array} operators cf. `operators.js`.\n * @param {Object} customOperators Custom operators to be used, if any.\n * @returns {Object} Operators map.\n */\nexport function generateOperatorsByType(operators, customOperators) {\n    const map = {};\n    const types = [...new Set([].concat(...operators.map((operator) => operator.types)))].sort();\n\n    types.forEach((type) => {\n        if (!Object.prototype.hasOwnProperty.call(map, type)) {\n            map[type] = [];\n        }\n        operators.forEach((operator) => {\n            if (operator.types.includes(type)) {\n                map[type].push({\n                    label: operator.label,\n                    value: operator.value,\n                });\n            }\n        });\n    });\n    Object.entries(customOperators || {}).forEach(([key, value]) => {\n        map[key] = value.options;\n    });\n    Object.keys(map).forEach((key) => {\n        map[key] = map[key].sort((a, b) => a.label.localeCompare(b.label));\n    });\n    return map;\n}\n\n/**\n * Allows retrieving operators by value, in O(1) time.\n *\n * @param {Array} operators cf. `operators.js`.\n * @param {Object} customOperators Custom operators to be used, if any.\n * @returns {Object} Operators map.\n */\nexport function generateOperatorsByValue(operators, customOperators) {\n    const map = {};\n    operators.forEach((operator) => {\n        const { value } = operator;\n        if (Object.prototype.hasOwnProperty.call(map, value)) {\n            throw new Error(`Duplicated operator: ${value}`);\n        }\n        map[value] = { ...operator };\n    });\n    Object.values(customOperators || {}).forEach((value) => {\n        value.options.forEach((option) => {\n            if (!Object.prototype.hasOwnProperty.call(map, option.value)) {\n                map[option.value] = { types: [] };\n            }\n            map[option.value] = {\n                ...map[option.value],\n                label: option.label,\n                value: option.value,\n            };\n            const { types } = map[option.value];\n            if (!types.includes(value.type)) {\n                types.push(value.type);\n            }\n        });\n    });\n    return map;\n}\n\n/**\n * Finds a node by ID.\n *\n * @param {Number} id The node ID.\n * @param {Object} node The starting node.\n * @returns {Object} The node with the given ID, or null if not found.\n */\nexport const findNodeById = (id, node) => {\n    if (node.id === id) {\n        return node;\n    }\n    if (node.rules) {\n        for (const rule of node.rules) {\n            const found = findNodeById(id, rule);\n            if (found) {\n                return found;\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * Finds a node's parent node by ID.\n *\n * @param {Number} id The node ID.\n * @param {Object} node The starting node.\n * @param {Object} parent The starting parent.\n * @returns {Object} The searched node's parent.\n */\nexport const findParentById = (id, node, parent) => {\n    if (!parent) {\n        parent = node;\n    }\n    if (node.id === id) {\n        return parent;\n    }\n    if (node.rules) {\n        parent = node;\n        for (const rule of node.rules) {\n            const found = findParentById(id, rule, parent);\n            if (found) {\n                return found;\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * Resets a query's node IDs.\n *\n * @param {Object} query A query with rules.\n * @param {string} mode \"random\" to set random IDs, or anything else to delete existing ones.\n * @returns {Object} The processed query instance.\n */\nexport function resetNodeIds(query, mode) {\n    const random = mode === \"random\";\n    if (random) {\n        query.id = query.id || Math.random();\n    } else {\n        delete query.id;\n    }\n    query.rules.map((rule) => {\n        if (random) {\n            rule.id = rule.id || Math.random();\n        } else {\n            delete rule.id;\n        }\n        if (rule.rules) {\n            resetNodeIds(rule, mode);\n        }\n        return rule;\n    });\n    return query;\n}\n\n/**\n * Deep clones a query.\n *\n * @param {Object} query The query to be cloned.\n * @returns {Object} Another instance of the given query.\n */\nexport function cloneQuery(query) {\n    return JSON.parse(JSON.stringify(query));\n}\n\n/**\n * Formats a query by deleting IDs from all nodes.\n *\n * @param {Object} query The query to be formatted.\n * @returns {Object} Another instance of the given query, without IDs.\n */\nexport function formatQuery(query) {\n    query = cloneQuery(query);\n    query = resetNodeIds(query);\n    return query;\n}\n\n/**\n * Verifies if a group is valid, i.e. all rules and nested groups are filled.\n *\n * @param {Object} group The group to validate.\n * @returns {Boolean} True if valid, false otherwise.\n */\nexport function isGroupValid(group) {\n    if (Object.getOwnPropertyNames(group).length === 0) {\n        return false;\n    }\n    for (const rule of group.rules) {\n        if (rule.rules) {\n            if (!isGroupValid(rule)) {\n                return false;\n            }\n        } else if (!isRuleValid(rule)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Verifies if a rule is valid.\n *\n * @param {Object} rule The rule to validate.\n * @returns {Boolean} True if valid, false otherwise.\n */\nexport function isRuleValid(rule) {\n    if (!rule.field || !rule.operator) {\n        return false;\n    }\n    if (/null/gi.test(rule.operator)) {\n        return true;\n    }\n    const { value } = rule;\n\n    if (Array.isArray(value)) {\n        return value?.length > 0;\n    }\n    if (/string/.test(typeof value)) {\n        return Boolean(value?.trim());\n    }\n    return value !== null && value !== undefined;\n}\n\n/**\n * Verifies if all fields have a corresponding filter.\n *\n * @param {Object} group The group to validate.\n * @param {Object} filtersByValue The filters to check against.\n * @returns {Boolean} True if valid, false otherwise.\n */\nfunction verifyFilters(group, filtersByValue) {\n    for (const rule of group.rules) {\n        if (rule.rules) {\n            if (!verifyFilters(rule, filtersByValue)) {\n                return false;\n            }\n        } else if (!Object.prototype.hasOwnProperty.call(filtersByValue, rule.field)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Checks if all fields have a corresponding filter.\n *\n * @param {Object} state The query to validate.\n * @param {Object} context The context with filters to check against.\n * @returns {Boolean} True if valid, false otherwise.\n */\nfunction isQueryValid(query, context) {\n    let valid = isGroupValid(query);\n\n    // Check the query is consistent with the available filters.\n    if (valid && context?.filtersByValue) {\n        valid = verifyFilters(query, context.filtersByValue);\n    }\n    return valid;\n}\n\nconst emptyRule = function () {\n    return {\n        field: null,\n        id: Math.random(),\n        operator: null,\n        value: null,\n    };\n};\n\nconst emptyGroup = function () {\n    return {\n        combinator: \"and\",\n        id: Math.random(),\n        rules: [emptyRule()],\n    };\n};\n\nfunction reducer(state, action) {\n    const query = { ...state };\n\n    switch (action.type) {\n        case \"add-group\": {\n            const group = findNodeById(action.id, query);\n            group.rules.push(emptyGroup());\n            return query;\n        }\n        case \"add-rule\": {\n            const group = findNodeById(action.id, query);\n            group.rules.push(emptyRule());\n            return query;\n        }\n        case \"move-rule\": {\n            const { addedIndex, id, removedIndex } = action;\n            const group = findNodeById(id, query);\n            group.rules = arrayMove(group.rules, removedIndex, addedIndex);\n            return query;\n        }\n        case \"remove-node\": {\n            const parent = findParentById(action.id, query);\n            parent.rules = parent.rules.filter((rule) => rule.id !== action.id);\n            return query;\n        }\n        case \"reset-query\": {\n            let { query } = action;\n            query = resetNodeIds(query, \"random\");\n            return query;\n        }\n        case \"set-combinator\": {\n            const node = findNodeById(action.id, query);\n            node.combinator = action.value;\n            return query;\n        }\n        case \"set-field\": {\n            const node = findNodeById(action.id, query);\n            node.field = action.value;\n            node.operator = action.operator;\n            node.value = null;\n            return query;\n        }\n        case \"set-operator\": {\n            const node = findNodeById(action.id, query);\n            node.operator = action.value;\n            if (/null/.test(action.value)) {\n                node.value = null;\n            }\n            return query;\n        }\n        case \"set-value\": {\n            const node = findNodeById(action.id, query);\n            node.value = action.value;\n            return query;\n        }\n        default: {\n            return query;\n        }\n    }\n}\n\nconst QueryBuilder = React.memo(\n    (props) => {\n        const [state, dispatch] = React.useReducer(\n            reducer,\n            props.query || {\n                combinator: \"and\",\n                rules: [],\n            }\n        );\n        const [context, setContext] = React.useState(null);\n\n        // Generate the context only once, or when the properties change.\n        React.useEffect(() => {\n            const { customOperators, filters, maxLevels, operators } = props;\n            setContext({\n                customOperators,\n                dispatch,\n                filters: props.sortFilters ? sortFilterGroupsByLabel(filters) : filters,\n                filtersByValue: generateFiltersByValue(filters),\n                flattenedFilters: generateFlattenedFilters(filters),\n                maxLevels,\n                operators,\n                operatorsByValue: generateOperatorsByValue(operators, customOperators),\n                operatorsByType: generateOperatorsByType(operators, customOperators),\n            });\n        }, [dispatch, props, props.filters, props.maxLevels, props.operators]);\n\n        // Reset the query if it was changed externally.\n        React.useEffect(() => {\n            if (!props.query?.id) {\n                dispatch({ type: \"reset-query\", query: props.query });\n            }\n        }, [props.query]);\n\n        // Propagate the change if the query is modified.\n        React.useEffect(() => {\n            if (props.onChange) {\n                const valid = isQueryValid(state, context);\n                props.onChange(state, valid);\n            }\n        }, [context, props, props.onChange, state]);\n\n        return state.id && context ? (\n            <Context.Provider value={context}>\n                <RuleGroup combinator={state.combinator} id={state.id} level={0} rules={state.rules} />\n                {props.debug && (\n                    <>\n                        <pre>{JSON.stringify(formatQuery(state), null, 4)}</pre>\n                        <pre>Valid? {isQueryValid(state, context) ? \"true\" : \"false\"}</pre>\n                    </>\n                )}\n            </Context.Provider>\n        ) : (\n            <span />\n        );\n    },\n    (prevProps, nextProps) => {\n        // Skip re-rendering if the query didn't change.\n        return dequal(prevProps.query, nextProps.query);\n    }\n);\n\nQueryBuilder.formatQuery = formatQuery;\nQueryBuilder.isQueryValid = isGroupValid;\nQueryBuilder.operators = operators;\n\nQueryBuilder.defaultProps = {\n    customOperators: {},\n    debug: false,\n    filters: [],\n    maxLevels: 1,\n    operators: [...operators],\n    onChange: null,\n    query: emptyGroup(),\n    sortFilters: true,\n};\n\nQueryBuilder.propTypes = {\n    customOperators: PropTypes.object,\n    debug: PropTypes.bool,\n    filters: PropTypes.array,\n    maxLevels: PropTypes.number,\n    operators: PropTypes.array,\n    onChange: PropTypes.func,\n    query: PropTypes.object,\n    sortFilters: PropTypes.bool,\n};\n\nexport default QueryBuilder;\n"],"names":["React","createContext","dispatch","filter","filtersByValue","flattenedFilters","maxLevel","operators","operatorsByType","operatorsByValue","label","value","types","Field","memo","props","context","useContext","Context","field","id","testId","Autocomplete","fullWidth","data-testid","disableClearable","groupBy","option","group","getOptionLabel","getOptionSelected","options","renderInput","params","TextField","style","minWidth","onChange","event","selected","type","operator","length","prevProps","nextProps","dequal","propTypes","PropTypes","string","number","isRequired","whyDidYouRender","Operator","useStyles","makeStyles","t","clearButton","margin","spacing","clearCell","marginLeft","marginTop","parseDate","date","parseISO","startOfDay","DatePicker","classes","setValue","useState","handleDateChange","useEffect","Grid","container","item","MuiPickersUtilsProvider","utils","DateFnsUtils","MuiDatePicker","datePickerProps","InputLabelProps","shrink","variant","clearable","getDatePickerProps","className","IconButton","aria-label","size","onClick","CloseIcon","fontSize","defaultProps","autoOk","format","bool","useFormControlLabelStyles","typography","readNumericValue","supportedTypes","Set","Value","formControlLabel","customOperators","test","has","customOperator","inputValue","target","newValue","Number","onKeyPress","key","preventDefault","filterSelectedOptions","multiple","openOnFocus","disableCloseOnSelect","limitTags","paddingTop","width","op","includes","map","val","v","replace","FormGroup","row","FormControlLabel","control","Radio","checked","color","name","find","Switch","any","removeIconStyles","removeButton","marginRight","removeIcon","fill","useRuleStyles","& > div","marginBottom","cursor","valueGridItem","flex","Rule","level","position","rule","combinator","rules","RuleGroup","RemoveIcon","object","useRuleGroupStyles","actionButton","& svg","textTransform","height","padding","borderLeft","palette","divider","paddingLeft","combinators","maxLevels","direction","disabled","ToggleButtonGroup","exclusive","ToggleButton","Typography","Button","AddIcon","DraggableContainer","onDrop","addedIndex","removedIndex","Draggable","generateFiltersByValue","filters","forEach","Object","prototype","hasOwnProperty","call","Error","generateFlattenedFilters","list","push","sortFilterGroupsByLabel","sort","a","b","localeCompare","generateOperatorsByType","concat","entries","keys","generateOperatorsByValue","values","array","findNodeById","node","found","findParentById","parent","resetNodeIds","query","mode","random","Math","formatQuery","JSON","parse","stringify","cloneQuery","isGroupValid","getOwnPropertyNames","isRuleValid","Array","isArray","Boolean","trim","isQueryValid","valid","verifyFilters","emptyRule","emptyGroup","reducer","state","action","arrayMove","QueryBuilder","useReducer","setContext","sortFilters","_props$query","Provider","debug","func"],"mappings":"08BAEA,MAAeA,EAAMC,cAAc,CAC/BC,SAAU,KACVC,OAAQ,GACRC,eAAgB,GAChBC,iBAAkB,GAClBC,SAAU,KACVC,UAAW,GACXC,gBAAiB,GACjBC,iBAAkB,KCVtB,MAAMF,EAAY,CACd,CACIG,MAAO,WACPC,MAAO,QACPC,MAAO,CAAC,OAAQ,UAAW,SAAU,QAAS,SAAU,SAAU,SAEtE,CACIF,MAAO,eACPC,MAAO,YACPC,MAAO,CAAC,OAAQ,UAAW,SAAU,QAAS,SAAU,SAAU,SAEtE,CACIF,MAAO,WACPC,MAAO,WACPC,MAAO,CAAC,SAEZ,CACIF,MAAO,mBACPC,MAAO,eACPC,MAAO,CAAC,SAEZ,CACIF,MAAO,YACPC,MAAO,OACPC,MAAO,CAAC,SAAU,YAEtB,CACIF,MAAO,eACPC,MAAO,UACPC,MAAO,CAAC,SAAU,YAEtB,CACIF,MAAO,mBACPC,MAAO,aACPC,MAAO,CAAC,SAAU,YAEtB,CACIF,MAAO,sBACPC,MAAO,gBACPC,MAAO,CAAC,SAAU,YAEtB,CACIF,MAAO,cACPC,MAAO,SACPC,MAAO,CAAC,SAEZ,CACIF,MAAO,aACPC,MAAO,QACPC,MAAO,CAAC,SAEZ,CACIF,MAAO,qBACPC,MAAO,eACPC,MAAO,CAAC,SAEZ,CACIF,MAAO,oBACPC,MAAO,cACPC,MAAO,CAAC,SAEZ,CACIF,MAAO,KACPC,MAAO,KACPC,MAAO,CAAC,gBAEZ,CACIF,MAAO,SACPC,MAAO,SACPC,MAAO,CAAC,gBAEZ,CACIF,MAAO,UACPC,MAAO,OACPC,MAAO,CAAC,OAAQ,UAAW,SAAU,cAAe,QAAS,SAAU,SAAU,SAErF,CACIF,MAAO,cACPC,MAAO,WACPC,MAAO,CAAC,OAAQ,UAAW,SAAU,cAAe,QAAS,SAAU,SAAU,UCvEnFC,EAAQb,EAAMc,KACfC,IACG,MAAMC,EAAUhB,EAAMiB,WAAWC,IAC3BC,MAAEA,EAAFC,GAASA,EAATC,OAAaA,GAAWN,GAExBb,SAAEA,EAAFE,eAAYA,EAAZC,iBAA4BA,EAA5BG,gBAA8CA,GAAoBQ,EAGxE,OACIhB,gBAACsB,GACGC,aACAC,cAAc,SAAQH,EACtBI,kBAAkB,EAClBC,QAAUC,GAAWA,EAAOC,MAC5BC,eAAiBF,GAAWA,EAAOjB,MACnCoB,kBAAmB,CAACH,EAAQhB,IACjBgB,EAAOhB,QAAUA,EAAMA,MAElCoB,QAAS1B,EACT2B,YAAcC,GAAWjC,gBAACkC,OAAcD,eAAoB,aAAa,gBAAgB,cACzFE,MAAO,CAAEC,SAAU,KACnBzB,MAfOQ,EAAQf,EAAee,GAAS,KAgBvCkB,SAAU,CAACC,EAAOC,KACd,MAAM5B,EAAQ4B,EAAWA,EAAS5B,MAAQ,MACpC6B,KAAEA,GAASpC,EAAeO,GAC1BJ,EAAYC,EAAgBgC,GAElCtC,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIqB,UADjBlC,MAAAA,SAAAA,EAAWmC,QAAS,EAAInC,EAAU,GAAGI,MAAQ,KAClBA,MAAAA,QAK5D,CAACgC,EAAWC,IAEDC,EAAOF,EAAWC,IAIjC/B,EAAMiC,UAAY,CACd3B,MAAO4B,EAAUC,OACjB5B,GAAI2B,EAAUE,OAAOC,WACrB7B,OAAQ0B,EAAUC,OAAOE,YAG7BrC,EAAMsC,iBAAkB,EC5CxB,MAAMC,EAAWpD,EAAMc,KAClBC,IACG,MAAMC,EAAUhB,EAAMiB,WAAWC,IAC3BC,MAAEA,EAAFC,GAASA,EAATqB,SAAaA,EAAbpB,OAAuBA,GAAWN,GAElCb,SAAEA,EAAFE,eAAYA,EAAZI,gBAA4BA,EAA5BC,iBAA6CA,GAAqBO,EAElEb,EAASgB,EAAQf,EAAee,GAAS,KAI/C,OACInB,gBAACsB,GACGC,aACAC,cAAc,YAAWH,EACzBI,kBAAkB,EAClBI,eAAiBF,GAAWA,EAAOjB,MACnCoB,kBAAmB,CAACH,EAAQhB,IAAUgB,EAAOhB,QAAUA,EAAMA,MAC7DoB,QAVQ5B,EAASK,EAAgBL,EAAOqC,MAAQ,GAWhDR,YAAcC,GACVjC,gBAACkC,OAAcD,eAAoB,gBAAgB,gBAAgB,cAEvEE,MAAO,CAAEC,SAAU,KACnBzB,MAdM8B,EAAWhC,EAAiBgC,GAAY,KAe9CJ,SAAU,CAACC,EAAOC,KACd,MAAM5B,MAAEA,GAAU4B,EAClBrC,EAAS,CAAEsC,KAAM,eAAgBpB,GAAAA,EAAIT,MAAAA,QAKrD,CAACgC,EAAWC,IAEDC,EAAOF,EAAWC,IAIjCQ,EAASN,UAAY,CACjB3B,MAAO4B,EAAUC,OACjB5B,GAAI2B,EAAUE,OAAOC,WACrBT,SAAUM,EAAUC,OACpB3B,OAAQ0B,EAAUC,OAAOE,YAG7BE,EAASD,iBAAkB,EC3C3B,MAAME,EAAYC,EAAYC,KAC1BC,YAAa,CACTC,OAAQF,EAAEG,QAAQ,IAEtBC,UAAW,CACPC,YAAaL,EAAEG,QAAQ,IACvBG,UAAY9C,GAAWA,EAAML,MAAQ6C,EAAEG,QAAQ,KAAO,WAI9D,SAASI,EAAUC,GACf,OAAKA,GAGe,iBAATA,IACPA,EAAOC,EAASD,IAEpBA,EAAOE,EAAWF,SAItB,MAAMG,EAAcnD,IAChB,MAAMoD,EAAUd,EAAUtC,IAEnBJ,EAAOyD,GAAYpE,EAAMqE,SAASP,EAAU/C,EAAMJ,QAOzD,SAAS2D,EAAiBP,GACtBA,EAAOD,EAAUC,GACjBK,EAASL,GACLhD,EAAMsB,UACNtB,EAAMsB,SAAS0B,GAmBvB,OA5BA/D,EAAMuE,UAAU,KACZ,MAAMR,EAAOD,EAAU/C,EAAMJ,OAC7ByD,EAASL,IACV,CAAChD,EAAMJ,QA0BNX,gBAACwE,GAAKC,cACFzE,gBAACwE,GAAKE,SACF1E,gBAAC2E,GAAwBC,MAAOC,GAC5B7E,gBAAC8E,OAhBjB,WACI,MAAMC,OACChE,GACHiE,qBACOjE,EAAMiE,iBACTC,QAAQ,IAEZC,QAAS,WAGb,cADOH,EAAgBI,UAChBJ,EAMwBK,UAA6BzE,WAAiB2D,OAGxEvD,EAAMoE,WACHnF,gBAACwE,GAAKE,QAAKW,UAAWlB,EAAQR,WAC1B3D,gBAACsF,GACGC,aAAW,QACXF,UAAWlB,EAAQX,YACnBhC,cAAgBT,EAAM,eAAR,SACdyE,KAAK,QACLC,QAAS,IAAMnB,EAAiB,OAEhCtE,gBAAC0F,GAAUC,SAAS,gBAQ5CzB,EAAW0B,kBACJd,EAAcc,cACjBC,QAAU,EACVrE,cAAe,cACfsE,OAAU,QAGd5B,EAAWpB,eACJgC,EAAchC,WACjBtB,cAAeuB,EAAUC,OACzBmC,UAAapC,EAAUgD,OCtF3B,MAAMC,EAA4B1C,EAAYC,IACnC,CACH7C,MAAO,CACHiF,SAAUpC,EAAE0C,WAAWN,aAK7BO,EAAoBvF,GACfA,MAAAA,EAAwCA,EAAQ,GAGrDwF,EAAiB,IAAIC,IAAI,CAAC,OAAQ,UAAW,cAAe,SAAU,QAAS,SAAU,SAAU,SAEnGC,EAAQrG,EAAMc,KACfC,IACG,MAAMoD,EAAU,CACZmC,iBAAkBN,KAEhBhF,EAAUhB,EAAMiB,WAAWC,IAE3BC,MAAEA,EAAFC,GAASA,EAATqB,SAAaA,EAAb9B,MAAuBA,GAAUI,GACjCwF,gBAAEA,EAAFrG,SAAmBA,EAAnBE,eAA6BA,GAAmBY,EAEtD,GAAI,QAAQwF,KAAK/D,GACb,OAAOzC,6BAEX,MAAMqB,EAAU,SAAQN,EAAMM,OACxBlB,EAASgB,OAAaf,EAAee,IAAW,CAAEqB,KAAM,MAE9D,IAAK2D,EAAeM,IAAItG,EAAOqC,MAAO,CAClC,MAAMkE,EAAiBH,EAAgBpG,EAAOqC,MAC9CrC,EAAOqC,KAAOkE,MAAAA,SAAAA,EAAgBlE,KAElC,OAAQrC,EAAOqC,MACX,IAAK,OACD,OACIxC,gBAACkE,GACGiB,aACA3D,cAAaH,EACbV,MAAOA,GAAS,KAChB0B,SAAW0B,IACP,MAAMpD,EAAQoD,EAAO+B,EAAO/B,EAAM,cAAgB,KAClD7D,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIT,MAAAA,OAIlD,IAAK,UACD,OACIX,gBAACkC,GACGV,cAAaH,EACbV,MAAOuF,EAAiBvF,GACxB0B,SAAWC,IACP,MAAMqE,EAAarE,EAAMsE,OAAOjG,MAC1BkG,EAAWF,EAAWjE,OAAS,EAAIoE,OAAOH,GAAc,KAC1DE,IAAalG,GACbT,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIT,MAAOkG,KAGjDE,WAAazE,IACL,KAAKkE,KAAKlE,EAAM0E,MAChB1E,EAAM2E,oBAK1B,IAAK,cACD,OACIjH,gBAACsB,GACG4F,yBACA3F,aACA4F,YACAC,eACA5F,cAAaH,EACbgG,sBAAsB,EACtBxF,eAAiBF,GAAWA,EAAOjB,MACnCoB,kBAAmB,CAACH,EAAQhB,IAAUgB,EAAOhB,QAAUA,EAAMA,MAC7D2G,WAAY,EACZvF,QAAS5B,EAAO4B,QAChBC,YAAcC,GAAWjC,gBAACkC,EAAcD,GACxCuD,KAAK,QACLrD,MAAO,CAAEoF,WAAY,EAAGC,MAAO,QAC/B7G,MAAOR,EAAO4B,QAAQ5B,OAAQsH,GAAO9G,MAAAA,SAAAA,EAAO+G,SAASD,EAAG9G,QACxD0B,SAAU,CAACC,EAAOC,KACd,MAAM5B,GAAS4B,GAAY,IAAIoF,IAAKjD,GAASA,EAAK/D,OAClDT,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIT,MAAAA,OAIlD,IAAK,SACD,OACIX,gBAACkC,GACGV,cAAaH,EACbV,MAAOuF,EAAiBvF,GACxB0B,SAAWC,IACP,MAAQ3B,MAAOiH,GAAQtF,EAAMsE,OACvBiB,EAAID,EAAIE,QAAQ,cAAe,IAAIA,QAAQ,sBAAuB,SAAW,KAC/ED,IAAMlH,GACNT,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIT,MAAOkH,OAK7D,IAAK,QACD,OACI7H,gBAAC+H,GAAUC,QACPhI,gBAACiI,GACG9D,QAASA,EAAQmC,iBACjB4B,QACIlI,gBAACmI,GACGC,SAAmB,IAAVzH,EACT0H,MAAM,UACN7G,cAAgBH,EAAF,QACdiH,KAAMjH,EACNV,MAAOA,EACP0B,SAAU,KACNnC,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIT,OAAO,OAIrDD,MAAM,OACNC,MAAOA,IAEXX,gBAACiI,GACG9D,QAASA,EAAQmC,iBACjB4B,QACIlI,gBAACmI,GACGC,SAAmB,IAAVzH,EACT0H,MAAM,UACN7G,cAAgBH,EAAF,SACdiH,KAAMjH,EACNV,MAAOA,EACP0B,SAAU,KACNnC,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIT,OAAO,OAIrDD,MAAM,QACNC,MAAOA,KAIvB,IAAK,SACD,OACIX,gBAACsB,GACGE,cAAaH,EACbQ,eAAiBF,GAAWA,EAAOjB,MACnCoB,kBAAmB,CAACH,EAAQhB,IAAUgB,EAAOhB,QAAUA,EAAMA,MAC7DoB,QAAS5B,EAAO4B,QAChBC,YAAcC,GAAWjC,gBAACkC,EAAcD,GACxCE,MAAO,CAAEqF,MAAO,KAChB7G,MAAOR,EAAO4B,QAAQwG,KAAMd,GAAO9G,IAAU8G,EAAG9G,OAChD0B,SAAU,CAACC,EAAOC,KAEdrC,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIT,MADpB4B,EAAWA,EAAS5B,MAAQ,UAK1D,IAAK,SACD,OACIX,gBAACwI,GACGH,MAAM,UACN7G,cAAaH,EACb+G,QAASzH,IAAS,EAClB0B,SAAWC,IAEPpC,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIT,MADpB2B,EAAMsE,OAAOwB,aAK3C,QACI,OACIpI,gBAACkC,GACGX,aACAC,cAAaH,EACbV,MAAOA,GAAS,GAChB0B,SAAWC,IACP,MAAM3B,MAAEA,GAAU2B,EAAMsE,OACxB1G,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,EAAIT,MAAAA,SAM1D,CAACgC,EAAWC,IAEDC,EAAOF,EAAWC,IAIjCyD,EAAMvD,UAAY,CACd3B,MAAO4B,EAAUC,OACjB5B,GAAI2B,EAAUE,OAAOC,WACrBT,SAAUM,EAAUC,OACpB3B,OAAQ0B,EAAUC,OAAOE,WACzBvC,MAAOoC,EAAU0F,KAGrBpC,EAAMlD,iBAAkB,ECpMxB,MAAMuF,EAAoBnF,KACtBoF,aAAc,CACVC,YAAarF,EAAEG,SAAS,GACxBG,UAAWN,EAAEG,QAAQ,MAEzBmF,WAAY,CACRC,KAAM,0BAIRC,EAAgBzF,EAAYC,QAEvBmF,EAAiBnF,IACpBkB,UAAW,CACPuE,UAAW,CACPC,aAAc1F,EAAEG,QAAQ,IACxBG,UAAWN,EAAEG,QAAQ,KAEzBwF,OAAU,QAEdC,cAAe,CACXC,KAAM,WAKZC,EAAQtI,IACV,MAAMoD,EAAU4E,IACV/H,EAAUhB,EAAMiB,WAAWC,IAE3BE,GAAEA,EAAFkI,MAAMA,EAANC,SAAaA,EAAbC,KAAuBA,GAASzI,GAChC0I,WAAEA,EAAFtI,MAAcA,EAAdsB,SAAqBA,EAArBiH,MAA+BA,EAA/B/I,MAAsCA,GAAU6I,GAEhDtJ,SAAEA,GAAac,EAEfK,EAAU,GAAEiI,KAASC,IAE3B,OAAOE,EACHzJ,gBAAC2J,GAAUF,WAAYA,EAAYrI,GAAIA,EAAIkI,MAAOA,EAAQ,EAAGI,MAAOA,IAEpE1J,gBAACwE,GAAKC,aAAUY,UAAWlB,EAAQM,UAAWjD,cAAc,QAAOH,EAAUqC,QAAS,GAClF1D,gBAACwE,GAAKE,SACF1E,gBAACsF,GACGD,UAAWlB,EAAQwE,aACnBnH,cAAc,QAAOH,WACrBmE,KAAK,QACLC,QAAS,KACLvF,EAAS,CAAEsC,KAAM,cAAepB,GAAAA,MAGpCpB,gBAAC4J,GAAWvE,UAAWlB,EAAQ0E,eAGvC7I,gBAACwE,GAAKE,SACF1E,gBAACa,GAAMM,MAAOA,EAAOC,GAAIA,EAAIC,OAAQA,KAEzCrB,gBAACwE,GAAKE,SACF1E,gBAACoD,GAASjC,MAAOA,EAAOC,GAAIA,EAAIqB,SAAUA,EAAUpB,OAAQA,KAEhErB,gBAACwE,GAAKE,QAAKW,UAAWlB,EAAQgF,eAC1BnJ,gBAACqG,GAAMlF,MAAOA,EAAOC,GAAIA,EAAIqB,SAAUA,EAAUpB,OAAQA,EAAQV,MAAOA,OAMxF0I,EAAKvG,UAAY,CACb1B,GAAI2B,EAAUE,OAAOC,WACrBoG,MAAOvG,EAAUE,OAAOC,WACxBqG,SAAUxG,EAAUE,OAAOC,WAC3BsG,KAAMzG,EAAU8G,OAAO3G,YAG3B,MAAM4G,EAAqBxG,EAAYC,MACnCwG,aAAc,CACVC,QAAS,CACLpB,YAAarF,EAAEG,QAAQ,IACvBG,UAAWN,EAAEG,QAAQ,MAEzBuG,cAAiB,QAErBR,WAAY,CACRS,OAAQ,GACRC,QAAS5G,EAAEG,QAAQ,EAAG,MAE1B9B,MAAO,CACHwI,WAAarJ,GAAWA,EAAMuI,MAAQ,EAAK,aAAY/F,EAAE8G,QAAQC,QAAY,OAC7EC,YAAahH,EAAEG,QAAQ,KACvBuF,aAAc1F,EAAEG,QAAQ,IACxBG,UAAY9C,GAAWA,EAAMuI,MAAQ,EAAI/F,EAAEG,QAAQ,IAAO,SAE3DgF,EAAiBnF,KAGlBoG,EAAa5I,IACf,MAAMoD,EAAU2F,EAAmB/I,GAC7BC,EAAUhB,EAAMiB,WAAWC,IAE3BuI,WAAEA,EAAFe,YAAcA,EAAdpJ,GAA2BA,EAA3BkI,MAA+BA,EAA/BI,MAAsCA,GAAU3I,EAChDM,EAAU,SAAQiI,GAElBpJ,SAAEA,EAAFuK,UAAYA,GAAczJ,EAEhC,OAAOsI,GAASmB,EACZzK,gBAACwE,GAAKC,aAAUY,UAAWlB,EAAQvC,MAAOJ,cAAaH,EAAQqJ,UAAU,SAAShH,QAAS,GACvF1D,gBAACwE,GAAKE,SACF1E,gBAACwE,GAAKC,aAAUf,QAAS,GACrB1D,gBAACwE,GAAKE,SACF1E,gBAACsF,GACGD,UAAWlB,EAAQwE,aACnBnH,cAAgBH,EAAF,UACdsJ,SAAoB,IAAVrB,EACV9D,KAAK,QACLC,QAAS,KACLvF,EAAS,CAAEsC,KAAM,cAAepB,GAAAA,MAGpCpB,gBAAC4J,GAAWvE,UAAWiE,EAAQ,EAAInF,EAAQ0E,WAAa,SAGhE7I,gBAACwE,GAAKE,SACF1E,gBAAC4K,GACGC,aACArF,KAAK,QACL7E,MAAO8I,EACPpH,SAAU,CAACC,EAAO3B,KACVA,GACAT,EAAS,CAAEsC,KAAM,iBAAkBpB,GAAAA,EAAIT,MAAAA,MAI9C6J,EAAY7C,IAAKjD,GACd1E,gBAAC8K,GACG9D,IAAKtC,EAAK/D,MACVa,cAAc,GAAEH,gBAAqBqD,EAAK/D,QAC1C0E,UAAWlB,EAAQsF,WACnB9I,MAAO+D,EAAK/D,OAEZX,gBAAC+K,GAAW7F,QAAQ,SAASR,EAAKhE,WAKlDV,gBAACwE,GAAKE,SACF1E,gBAACgL,GACG3F,UAAWlB,EAAQ4F,aACnB1B,MAAM,UACN7G,cAAgBH,EAAF,YACdoE,QAAS,KACLvF,EAAS,CAAEsC,KAAM,WAAYpB,GAAAA,MAGjCpB,gBAACiL,iBAIR3B,EAAQmB,GACLzK,gBAACwE,GAAKE,SACF1E,gBAACgL,GACG3F,UAAWlB,EAAQ4F,aACnB1B,MAAM,UACN7G,cAAgBH,EAAF,aACdoE,QAAS,KACLvF,EAAS,CAAEsC,KAAM,YAAapB,GAAAA,MAGlCpB,gBAACiL,qBAOpBvB,MAAAA,SAAAA,EAAOhH,QAAS,GACb1C,gBAACwE,GAAKE,SACF1E,gBAACkL,GACGC,OAAQ,EAAGC,WAAAA,EAAYC,aAAAA,MACnBnL,EAAS,CAAEsC,KAAM,YAAa4I,WAAAA,EAAYhK,GAAAA,EAAIiK,aAAAA,MAGjD3B,EAAM/B,IAAI,CAAC6B,EAAMD,IACdvJ,gBAACsL,GAAUtE,IAAKwC,EAAKpI,IACjBpB,gBAACqJ,GAAKjI,GAAIoI,EAAKpI,GAAIkI,MAAOA,EAAOC,SAAUA,EAAUC,KAAMA,SAQnFxJ,uCC5LQuL,EAAuBC,GACnC,MAAM7D,EAAM,GAWZ,OAVA6D,EAAQC,QAAStL,KACGA,EAAO4B,SAAW,IAC1B0J,QAAS9J,IACb,MAAMhB,MAAEA,GAAUgB,EAClB,GAAI+J,OAAOC,UAAUC,eAAeC,KAAKlE,EAAKhH,GAC1C,UAAUmL,MAAO,sBAAqBnL,GAE1CgH,EAAIhH,QAAcgB,OAGnBgG,WASKoE,EAAyBP,GACrC,MAAMQ,EAAO,GASb,OARAR,EAAQC,QAAStL,IACbA,EAAO4B,QAAQ0J,QAAS9J,IACpBqK,EAAKC,QACDrK,MAAOzB,EAAOO,OACXiB,QAIRqK,EASX,SAAgBE,EAAwBV,GAIpC,OAHAA,EAAQC,QAAStL,IACbA,EAAO4B,QAAU5B,EAAO4B,QAAQoK,KAAK,CAACC,EAAGC,IAAMD,EAAE1L,MAAM4L,cAAcD,EAAE3L,UAEpE8K,EAUX,SAAgBe,EAAwBhM,EAAWgG,GAC/C,MAAMoB,EAAM,GAsBZ,MArBc,IAAI,IAAIvB,IAAI,GAAGoG,UAAUjM,EAAUoH,IAAKlF,GAAaA,EAAS7B,UAAUuL,OAEhFV,QAASjJ,IACNkJ,OAAOC,UAAUC,eAAeC,KAAKlE,EAAKnF,KAC3CmF,EAAInF,GAAQ,IAEhBjC,EAAUkL,QAAShJ,IACXA,EAAS7B,MAAM8G,SAASlF,IACxBmF,EAAInF,GAAMyJ,KAAK,CACXvL,MAAO+B,EAAS/B,MAChBC,MAAO8B,EAAS9B,YAKhC+K,OAAOe,QAAQlG,GAAmB,IAAIkF,QAAQ,EAAEzE,EAAKrG,MACjDgH,EAAIX,GAAOrG,EAAMoB,UAErB2J,OAAOgB,KAAK/E,GAAK8D,QAASzE,IACtBW,EAAIX,GAAOW,EAAIX,GAAKmF,KAAK,CAACC,EAAGC,IAAMD,EAAE1L,MAAM4L,cAAcD,EAAE3L,UAExDiH,WAUKgF,EAAyBpM,EAAWgG,GAChD,MAAMoB,EAAM,GAwBZ,OAvBApH,EAAUkL,QAAShJ,IACf,MAAM9B,MAAEA,GAAU8B,EAClB,GAAIiJ,OAAOC,UAAUC,eAAeC,KAAKlE,EAAKhH,GAC1C,UAAUmL,MAAO,wBAAuBnL,GAE5CgH,EAAIhH,QAAc8B,KAEtBiJ,OAAOkB,OAAOrG,GAAmB,IAAIkF,QAAS9K,IAC1CA,EAAMoB,QAAQ0J,QAAS9J,IACd+J,OAAOC,UAAUC,eAAeC,KAAKlE,EAAKhG,EAAOhB,SAClDgH,EAAIhG,EAAOhB,OAAS,CAAEC,MAAO,KAEjC+G,EAAIhG,EAAOhB,YACJgH,EAAIhG,EAAOhB,QACdD,MAAOiB,EAAOjB,MACdC,MAAOgB,EAAOhB,QAElB,MAAMC,MAAEA,GAAU+G,EAAIhG,EAAOhB,OACxBC,EAAM8G,SAAS/G,EAAM6B,OACtB5B,EAAMqL,KAAKtL,EAAM6B,UAItBmF,EDgFXgC,EAAU/D,aAAe,CACrB6D,WAAY,MACZe,YAAa,CACT,CAAE9J,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,KAAMC,MAAO,OAE1B+I,MAAO,IAGXC,EAAU7G,UAAY,CAClB2G,WAAY1G,EAAUC,OACtBwH,YAAazH,EAAU8J,MACvBzL,GAAI2B,EAAUE,OAAOC,WACrBoG,MAAOvG,EAAUE,OAAOC,WACxBwG,MAAO3G,EAAU8J,aCpFRC,EAAe,CAAC1L,EAAI2L,KAC7B,GAAIA,EAAK3L,KAAOA,EACZ,OAAO2L,EAEX,GAAIA,EAAKrD,MACL,IAAK,MAAMF,KAAQuD,EAAKrD,MAAO,CAC3B,MAAMsD,EAAQF,EAAa1L,EAAIoI,GAC/B,GAAIwD,EACA,OAAOA,EAInB,aAWSC,EAAiB,CAAC7L,EAAI2L,EAAMG,KAIrC,GAHKA,IACDA,EAASH,GAETA,EAAK3L,KAAOA,EACZ,OAAO8L,EAEX,GAAIH,EAAKrD,MAAO,CACZwD,EAASH,EACT,IAAK,MAAMvD,KAAQuD,EAAKrD,MAAO,CAC3B,MAAMsD,EAAQC,EAAe7L,EAAIoI,EAAM0D,GACvC,GAAIF,EACA,OAAOA,GAInB,aAUJ,SAAgBG,EAAaC,EAAOC,GAChC,MAAMC,EAAkB,WAATD,EAiBf,OAhBIC,EACAF,EAAMhM,GAAKgM,EAAMhM,IAAMmM,KAAKD,gBAErBF,EAAMhM,GAEjBgM,EAAM1D,MAAM/B,IAAK6B,IACT8D,EACA9D,EAAKpI,GAAKoI,EAAKpI,IAAMmM,KAAKD,gBAEnB9D,EAAKpI,GAEZoI,EAAKE,OACLyD,EAAa3D,EAAM6D,GAEhB7D,IAEJ4D,EAmBX,SAAgBI,EAAYJ,GAGxB,OADQD,EADRC,EAXJ,SAA2BA,GACvB,OAAOK,KAAKC,MAAMD,KAAKE,UAAUP,IAUzBQ,CAAWR,IAWvB,SAAgBS,GAAajM,GACzB,GAAiD,IAA7C8J,OAAOoC,oBAAoBlM,GAAOc,OAClC,SAEJ,IAAK,MAAM8G,KAAQ5H,EAAM8H,MACrB,GAAIF,EAAKE,OACL,IAAKmE,GAAarE,GACd,kBAEIuE,GAAYvE,GACpB,SAGR,SASJ,SAAgBuE,GAAYvE,GACxB,IAAKA,EAAKrI,QAAUqI,EAAK/G,SACrB,SAEJ,GAAI,SAAS+D,KAAKgD,EAAK/G,UACnB,SAEJ,MAAM9B,MAAEA,GAAU6I,EAElB,OAAIwE,MAAMC,QAAQtN,IACPA,MAAAA,SAAAA,EAAO+B,QAAS,EAEvB,SAAS8D,YAAY7F,GACduN,QAAQvN,MAAAA,SAAAA,EAAOwN,QAEnBxN,MAAAA,EA8BX,SAASyN,GAAahB,EAAOpM,GACzB,IAAIqN,EAAQR,GAAaT,GAMzB,OAHIiB,IAASrN,MAAAA,SAAAA,EAASZ,kBAClBiO,EAzBR,SAASC,EAAc1M,EAAOxB,GAC1B,IAAK,MAAMoJ,KAAQ5H,EAAM8H,MACrB,GAAIF,EAAKE,OACL,IAAK4E,EAAc9E,EAAMpJ,GACrB,kBAEIsL,OAAOC,UAAUC,eAAeC,KAAKzL,EAAgBoJ,EAAKrI,OAClE,SAGR,SAeYmN,CAAclB,EAAOpM,EAAQZ,iBAElCiO,EAGX,MAAME,GAAY,WACd,MAAO,CACHpN,MAAO,KACPC,GAAImM,KAAKD,SACT7K,SAAU,KACV9B,MAAO,OAIT6N,GAAa,WACf,MAAO,CACH/E,WAAY,MACZrI,GAAImM,KAAKD,SACT5D,MAAO,CAAC6E,QAIhB,SAASE,GAAQC,EAAOC,GACpB,MAAMvB,OAAasB,GAEnB,OAAQC,EAAOnM,MACX,IAAK,YAGD,OAFcsK,EAAa6B,EAAOvN,GAAIgM,GAChC1D,MAAMuC,KAAKuC,MACVpB,EAEX,IAAK,WAGD,OAFcN,EAAa6B,EAAOvN,GAAIgM,GAChC1D,MAAMuC,KAAKsC,MACVnB,EAEX,IAAK,YAAa,CACd,MAAMhC,WAAEA,EAAFhK,GAAcA,EAAdiK,aAAkBA,GAAiBsD,EACnC/M,EAAQkL,EAAa1L,EAAIgM,GAE/B,OADAxL,EAAM8H,MAAQkF,EAAUhN,EAAM8H,MAAO2B,EAAcD,GAC5CgC,EAEX,IAAK,cAAe,CAChB,MAAMF,EAASD,EAAe0B,EAAOvN,GAAIgM,GAEzC,OADAF,EAAOxD,MAAQwD,EAAOxD,MAAMvJ,OAAQqJ,GAASA,EAAKpI,KAAOuN,EAAOvN,IACzDgM,EAEX,IAAK,cAAe,CAChB,IAAMA,MAAAA,GAAUuB,EAEhB,OADAvB,EAAQD,EAAaC,EAAO,UACrBA,EAEX,IAAK,iBAGD,OAFaN,EAAa6B,EAAOvN,GAAIgM,GAChC3D,WAAakF,EAAOhO,MAClByM,EAEX,IAAK,YAAa,CACd,MAAML,EAAOD,EAAa6B,EAAOvN,GAAIgM,GAIrC,OAHAL,EAAK5L,MAAQwN,EAAOhO,MACpBoM,EAAKtK,SAAWkM,EAAOlM,SACvBsK,EAAKpM,MAAQ,KACNyM,EAEX,IAAK,eAAgB,CACjB,MAAML,EAAOD,EAAa6B,EAAOvN,GAAIgM,GAKrC,OAJAL,EAAKtK,SAAWkM,EAAOhO,MACnB,OAAO6F,KAAKmI,EAAOhO,SACnBoM,EAAKpM,MAAQ,MAEVyM,EAEX,IAAK,YAGD,OAFaN,EAAa6B,EAAOvN,GAAIgM,GAChCzM,MAAQgO,EAAOhO,MACbyM,EAEX,QACI,OAAOA,GAKnB,MAAMyB,GAAe7O,EAAMc,KACtBC,IACG,MAAO2N,EAAOxO,GAAYF,EAAM8O,WAC5BL,GACA1N,EAAMqM,OAAS,CACX3D,WAAY,MACZC,MAAO,MAGR1I,EAAS+N,GAAc/O,EAAMqE,SAAS,MAiC7C,OA9BArE,EAAMuE,UAAU,KACZ,MAAMgC,gBAAEA,EAAFiF,QAAmBA,EAAnBf,UAA4BA,EAA5BlK,UAAuCA,GAAcQ,EAC3DgO,EAAW,CACPxI,gBAAAA,EACArG,SAAAA,EACAsL,QAASzK,EAAMiO,YAAc9C,EAAwBV,GAAWA,EAChEpL,eAAgBmL,EAAuBC,GACvCnL,iBAAkB0L,EAAyBP,GAC3Cf,UAAAA,EACAlK,UAAAA,EACAE,iBAAkBkM,EAAyBpM,EAAWgG,GACtD/F,gBAAiB+L,EAAwBhM,EAAWgG,MAEzD,CAACrG,EAAUa,EAAOA,EAAMyK,QAASzK,EAAM0J,UAAW1J,EAAMR,YAG3DP,EAAMuE,UAAU,sBACPxD,EAAMqM,0BAAN6B,EAAa7N,KACdlB,EAAS,CAAEsC,KAAM,cAAe4K,MAAOrM,EAAMqM,SAElD,CAACrM,EAAMqM,QAGVpN,EAAMuE,UAAU,KACZ,GAAIxD,EAAMsB,SAAU,CAChB,MAAMgM,EAAQD,GAAaM,EAAO1N,GAClCD,EAAMsB,SAASqM,EAAOL,KAE3B,CAACrN,EAASD,EAAOA,EAAMsB,SAAUqM,IAE7BA,EAAMtN,IAAMJ,EACfhB,gBAACkB,EAAQgO,UAASvO,MAAOK,GACrBhB,gBAAC2J,GAAUF,WAAYiF,EAAMjF,WAAYrI,GAAIsN,EAAMtN,GAAIkI,MAAO,EAAGI,MAAOgF,EAAMhF,QAC7E3I,EAAMoO,OACHnP,gCACIA,2BAAMyN,KAAKE,UAAUH,EAAYkB,GAAQ,KAAM,IAC/C1O,qCAAaoO,GAAaM,EAAO1N,GAAW,OAAS,WAKjEhB,8BAGR,CAAC2C,EAAWC,IAEDC,EAAOF,EAAUyK,MAAOxK,EAAUwK,QAIjDyB,GAAarB,YAAcA,EAC3BqB,GAAaT,aAAeP,GAC5BgB,GAAatO,UAAYA,EAEzBsO,GAAajJ,aAAe,CACxBW,gBAAiB,GACjB4I,OAAO,EACP3D,QAAS,GACTf,UAAW,EACXlK,UAAW,IAAIA,GACf8B,SAAU,KACV+K,MAAOoB,KACPQ,aAAa,GAGjBH,GAAa/L,UAAY,CACrByD,gBAAiBxD,EAAU8G,OAC3BsF,MAAOpM,EAAUgD,KACjByF,QAASzI,EAAU8J,MACnBpC,UAAW1H,EAAUE,OACrB1C,UAAWwC,EAAU8J,MACrBxK,SAAUU,EAAUqM,KACpBhC,MAAOrK,EAAU8G,OACjBmF,YAAajM,EAAUgD"}